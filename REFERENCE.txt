===========================================================
Configuration Reference
===========================================================

--------------------------------
Config Files precedence
--------------------------------
Main configuration file  (first found):
  - ARG: -c file.conf  
  - ./cmt.conf next to binary + conf.d/*
  - /opt/cmt_monitor/cmt.conf + conf.d/*

Merge with :
  - Merge additional conf files defined in main config file
  - if defined, merge Remote Conf 


--------------------------------
timerange
--------------------------------
- yes
- no
- after YYYY-MM-DD hh:mm:ss
- before YYYY-MM-DD hh:mm:ss
- hrange hh:mm:ss hh:mm:ss
- ho   (8h30/18h mon>fri)
- hno  (! (8h30/18h mon>fri))


----------------------
Global
----------------------

global:
  cmt_group: cavaliba
  cmt_node: dev_vm1

  [enable]                 : timerange ; DEFAULT = yes; master switch (no inheritance)
  [enable_pager]           : timerange ; DEFAULT = no ; master switch (no inheritance)
  [pager_rate_limit]       : seconds ; default 7200
  [conf_url]               : https://.../api/  (/group_node.txt if url ends by /)
  [max_execution_time]     : seconds ; DEFAULT 5
  [load_confd]             : yes/no ; DEFAULT no
  [alert_max_level]        : alert, warn, notice   ; lower priority ;


  ()enable_metrology       : yes/no    ; DEFAULT = yes ; send events to metrology servers  (with ARG --report)
  ()secret_key:            : XXXX ; add to event, post to config uri
  ()conf_dirs              : list of additional files/dirs for conf to merge
  ()cron_frequency:        : min seconds between cron runs
  ()enable_cli_run         : yes (default) /no  ; help disable a long or dangerous run (perf)
  ()persist_file            : default :  persist.json


----------------------
Metrology Servers
----------------------

metrology_servers:

  graylog_test1:
      type: graylog_udp_gelf
      host: 10.10.10.13
      port: 12201
  graylog_test2:
      type: graylog_tcp_gelf
      url: http://10.10.10.13:8080/gelf

      [enable]                : timerange ; default = yes
      
      ()secret_key

----------------------
Pager services
----------------------

pagers:
  alert              : mandatory entry 'alert'
     type            : team_channel
     url             :   
     [enable]        : timerange ; DEFAULT = no 
     ()secret_key    : 
     ()add_tags
         tag: value
         tag: value
  test               : mandatory 'test' entry for ARG --teamstest
     type            : team_channel
     url             :   
     [enable]        : timerange ; DEFAULT = no  test:
     ()secret_key    : 
     ()add_tags
         tag: value
         tag: value

---------------------------
Modules
---------------------------

modules:
  name:                     : module name : ex load , cpu, swap, ...
    enable                  : timerange ; default yes
  name:                     : load 
    enable                  : timerange ; default yes
    [alert_max_level]       : alert, warn, notice (scale down)  ; overwrites global entry

    () cron_frequency:       : min seconds between cron runs
    //()enable_cli_run        : yes (default) / no  
    //()send_metrology        : yes (all), no ; send events to metrology servers
    //()metrology_target      : default : all ; NAME ... NAME of metrology servers to reach
    //()event_prefix          : default : cmt_  ; added in front of each event field
    //()add_tags              : e.g. : location, datacenter, cause/symptom
       - tag: value
       - tag: value
    //[()send_to_pager]:    : timerange ; DEFAULT = no
    //[()pager_rate_limit]  : seconds

--------------------------
Checks instances
--------------------------

general check config
---------------------
checks
  checkname                      : string - unique id
      module                     : module name (load, cpu, url)
      arg1                       : specific to module
      arg2                       : specific to module  
      (...)

      [enable]                   : timerange ; default yes ; yes, no, before, after, hrange, ho, hno
      [alert_max_level]          : alert, warn, notice (scale down)  ; overwrites global / module entry


      () [enable_pager]          :
      () [cron_frequency]        : min seconds between cron runs
      () [enable_cli_run]        : yes (default) / no
      () [send_metrology]        : yes (all), no ; send events to metrology servers
      () [metrology_target]      : default : all ; NAME ... NAME of metrology servers to reach
      () [set_metrology_alert]   : yes,no ; set alert field (in events) if check cond. failed
      () [set_metrology_warning] : yes,no ; set warning field (in events)
      () [event_prefix]          : default : cmt_  ; added in front of each event field
      () [add_tags]              : e.g. : location, datacenter, cause/symptom
           tag: value
           tag: value
      () [send_to_pager:]        : timerange ; default no  (global & channel must be active also)
      //() [pager_rate_limit]      : seconds


specific check options
----------------------
load:
  module : load

cpu:
  module : cpu

swap:
  module : swap

memory:
  module : memory

boottime
  module : boottime  

mount:
  module        : mount
  path          : /path/to/mountpoint

disk:
  module        : disk
  path          : /absolute/path
  alert         : INT [percent before alert]
  ()alert2:     : float unit  ( B, KB, MB, GB, percent,  hours if trend can be computed)

process
  module        : process
  psname        : string  (system process name)

url:
  module          : url
  url             : https://www.cavaliba.com/
  pattern         : "Cavaliba"
  allow_redirects : yes ; default = no
  ssl_verify:     : yes ; default = no
  ()host          : virtual host header
  ()headers       : other headers

ping
   module          : ping
   host            : 192.168.0.1
 

folder
  module            : folder
  folder_name       : string, unique value
  path              : /path/to/folder
  recursive         : yes  ; default = no
  ()[]filter: *.txt : TODO 
  [target:
     files_max       : 400
     files_min       : 2
     size_max:       : (folder)
     size_min:       : (folder)      
     age_max:        : seconds, (file)
     age_min:        : seconds (file)
     has_files: 
         - filename1
         - filename2
     ()min_bytes:    : TODO (file)
     ()max_bytes:    : TODO
   ]
